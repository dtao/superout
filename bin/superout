#!/usr/bin/env node

var http  = require('http'),
    fs    = require('fs'),
    path  = require('path'),
    spawn = require('child_process').spawn;

var html = fs.readFileSync(path.join(__dirname, '../resources/index.html'), 'utf8'),
    css  = fs.readFileSync(path.join(__dirname, '../resources/styles.css'), 'utf8'),
    js   = fs.readFileSync(path.join(__dirname, '../resources/script.js'), 'utf8');

var updates = [];

function startServer() {
  var server = http.createServer(function(req, res) {
    switch (req.url) {
      case '/':
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.write(html);
        res.end();
        break;

      case '/updates':
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.write(JSON.stringify(updates));
        updates = [];
        res.end();
        break;

      case '/styles.css':
        res.writeHead(200, { 'Content-Type': 'text/css' });
        res.write(css);
        res.end();
        break;

      case '/script.js':
        res.writeHead(200, { 'Content-Type': 'text/javascript' });
        res.write(js);
        res.end();
        break;

      default:
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.write('Not Found');
        res.end();
    }
  });

  console.log('Go to http://localhost:8080');
  server.listen(8080);
}

function spawnProcess(args) {
  var proc = spawn(args[0], args.slice(1), {
    cwd: process.cwd()
  });

  var counter = 1;

  proc.stdout.setEncoding('utf8');
  proc.stdout.on('data', function(data) {
    updates.push({
      type: 'stdout',
      id: counter++,
      timestamp: Date.now(),
      message: data
    });
  });

  proc.stderr.setEncoding('utf8');
  proc.stderr.on('data', function(data) {
    updates.push({
      type: 'stderr',
      id: counter++,
      timestamp: Date.now(),
      message: data
    });
  });
}

function readInput() {
  var counter = 1;

  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(data) {
    updates.push({
      type: 'stderr',
      id: counter++,
      timestamp: Date.now(),
      message: data
    });
  });

  process.stdin.resume();
}

var args = process.argv.slice(2);

if (args.length > 0) {
  spawnProcess(args);
} else {
  readInput();
}

startServer();
